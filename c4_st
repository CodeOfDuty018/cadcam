#include <ShiftRegister74HC595.h>
#include <LiquidCrystalSerial.h>

// Khởi tạo IC 74HC595 (DATA, CLOCK, LATCH)
const uint8_t dataPin = 3;
const uint8_t clockPin = 0;
const uint8_t latchPin = 4;

ShiftRegister74HC595<1> sr(dataPin, clockPin, latchPin);
LiquidCrystalSerial lcd((uint8_t)0, (uint8_t)1, (uint8_t)2);

// Mảng mã phím bàn phím
char keypad[4][3] = {
    {'1', '2', '3'},
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

// Cột của bàn phím
const int colPins[3] = {5, 6, 7};

// Biến quản lý
char enteredCode[8] = "";     // Lưu mã đã nhập
int codeIndex = 0;            // Vị trí nhập
const char correctCode[] = "7355608"; // Mã kích hoạt/tắt bom
bool isBombArmed = false;     // Trạng thái bom
unsigned long timerStart = 0; // Thời gian bắt đầu đếm ngược
const unsigned long countdownTime = 30000; // 30 giây đếm ngược

void setup() {
    lcd.begin(16, 2);
    lcd.print("Enter Code:");
    delay(2000);

    // Cấu hình cột là INPUT_PULLUP
    for (int i = 0; i < 3; i++) {
        pinMode(colPins[i], INPUT_PULLUP);
    }

    // Bắt đầu ở trạng thái nhập mã
    lcd.clear();
    lcd.print("Enter Code:");
}

void loop() {
    char key = quetPhim();
    if (key != ' ') {
        handleKeyInput(key);
    }

    // Đếm ngược nếu bom đã kích hoạt
    if (isBombArmed) {
        unsigned long elapsedTime = millis() - timerStart;
        if (elapsedTime < countdownTime) {
            displayCountdown(countdownTime - elapsedTime);
        } else {
            bombExplode(); // Mô phỏng bom nổ
        }
    }
}

// Hàm quét phím
char quetPhim() {
    for (int row = 0; row < 4; row++) {
        // Tắt tất cả hàng
        for (int i = 0; i < 4; i++) {
            sr.set(i, HIGH);
        }
        delay(1);

        // Kích hoạt hàng hiện tại
        sr.set(row, LOW);

        // Đọc tín hiệu từ các cột
        for (int col = 0; col < 3; col++) {
            if (digitalRead(colPins[col]) == LOW) {
                delay(200); // Giảm độ nhạy
                return keypad[row][col];
            }
        }
    }
    return ' ';
}

// Hàm xử lý khi nhấn phím
void handleKeyInput(char key) {
    if (key == '#') {
        // Nhấn # để xác nhận mã
        enteredCode[codeIndex] = '\0'; // Kết thúc chuỗi
        checkCode();
    } else if (key == '*') {
        // Nhấn * để xóa mã
        codeIndex = 0;
        enteredCode[0] = '\0';
    } else {
        // Nhập số (tối đa 7 ký tự)
        if (codeIndex < 7) {
            enteredCode[codeIndex++] = key;
        }
    }

    // Hiển thị mã nhập trong quá trình đếm ngược
    if (isBombArmed) {
        lcd.setCursor(0, 1);  // Dòng 2
        lcd.print(enteredCode);
        lcd.print("        "); // Xóa phần dư
    }
}

// Hàm kiểm tra mã đã nhập
void checkCode() {
    lcd.clear();
    if (strcmp(enteredCode, correctCode) == 0) { // So sánh mã nhập với mã đúng
        if (!isBombArmed) {
            // Kích hoạt bom nếu chưa kích hoạt
            isBombArmed = true;
            timerStart = millis();
            lcd.print("Bomb Armed!");
        } else {
            // Gỡ bom nếu đang đếm ngược
            isBombArmed = false;
            lcd.print("Bomb Defused!");
        }
    } else {
        lcd.print("Wrong Code!");
    }
    delay(2000);
    lcd.clear();
    lcd.print("Enter Code:");
    codeIndex = 0; // Reset mã nhập
}

// Hàm hiển thị đếm ngược
void displayCountdown(unsigned long timeLeft) {
    lcd.setCursor(0, 0);      // Dòng 1
    lcd.print("Time Left: ");
    lcd.print(timeLeft / 1000); // Hiển thị giây
    lcd.print("s  ");        // Xóa phần dư
}

// Hàm xử lý khi bom nổ
void bombExplode() {
    lcd.clear();
    lcd.print("BOOM!");
    for (int i = 0; i < 10; i++) { // Nháy LED để mô phỏng nổ
        sr.set(4, LOW);
        delay(200);
        sr.set(4, HIGH);
        delay(200);
    }
    while (1); // Vô hạn (reset để tiếp tục)
}
