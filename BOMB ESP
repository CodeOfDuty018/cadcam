#include <ShiftRegister74HC595.h>
#include <LiquidCrystalSerial.h>

// Khởi tạo IC 74HC595 (DATA, CLOCK, LATCH)
const uint8_t dataPin = D3;
const uint8_t clockPin = D0;
const uint8_t latchPin = D4;

ShiftRegister74HC595<1> sr(dataPin, clockPin, latchPin);
LiquidCrystalSerial lcd((uint8_t)D0, (uint8_t)D1, (uint8_t)D2);

// Mảng mã phím bàn phím
char keypad[4][3] = {
    {'1', '2', '3'},
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

// Cột của bàn phím
const int colPins[3] = {D5, D6, D7};

// Biến quản lý
char enteredCode[8] = "";          // Lưu mã đã nhập
int codeIndex = 0;                 // Vị trí nhập
const char correctCode[] = "7355608"; // Mã kích hoạt/tắt bom
bool isBombArmed = false;          // Trạng thái bom
unsigned long timerStart = 0;      // Thời gian bắt đầu đếm ngược
unsigned long countdownTime = 30000; // 30 giây đếm ngược mặc định
bool isEnteringTime = true;        // Trạng thái nhập thời gian
unsigned long enteredTime = 0;     // Lưu thời gian người dùng nhập

bool ledState = false;             // Trạng thái của LED
unsigned long lastBlinkTime = 0;   // Lưu thời gian lần nhấp nháy cuối cùng

void setup() {
    lcd.begin(16, 2);
    lcd.print("Set Time (s):");
    delay(2000);

    // Cấu hình cột là INPUT_PULLUP
    for (int i = 0; i < 3; i++) {
        pinMode(colPins[i], INPUT_PULLUP);
    }

    // Bắt đầu ở trạng thái nhập thời gian
    lcd.clear();
    lcd.print("Set Time (s):");
}

void loop() {
    char key = quetPhim();
    if (key != ' ') {
        if (isEnteringTime) {
            handleTimeInput(key); // Xử lý nhập thời gian
        } else {
            handleKeyInput(key); // Xử lý nhập mã
        }
    }

    // Đếm ngược nếu bom đã kích hoạt
    if (isBombArmed) {
        unsigned long elapsedTime = millis() - timerStart;
        if (elapsedTime < countdownTime) {
            unsigned long timeLeft = countdownTime - elapsedTime;
            displayCountdown(timeLeft); // Hiển thị đếm ngược
            controlLED(timeLeft);       // Điều khiển LED nhấp nháy
        } else {
            bombExplode(); // Mô phỏng bom nổ
        }
    }
}

// Hàm quét phím
char quetPhim() {
    for (int row = 0; row < 4; row++) {
        // Tắt tất cả hàng
        for (int i = 0; i < 4; i++) {
            sr.set(i, HIGH);
        }
        delay(1);

        // Kích hoạt hàng hiện tại
        sr.set(row, LOW);

        // Đọc tín hiệu từ các cột
        for (int col = 0; col < 3; col++) {
            if (digitalRead(colPins[col]) == LOW) {
                delay(200); // Giảm độ nhạy
                return keypad[row][col];
            }
        }
    }
    return ' ';
}

// Hàm xử lý nhập thời gian
void handleTimeInput(char key) {
    if (key == '#') {
        // Khi nhấn #, xác nhận thời gian đã nhập
        countdownTime = calculateTotalSeconds() * 1000;  // Chuyển sang mili giây
        lcd.clear();
        lcd.print("Enter Code:");  // Chuyển sang trạng thái nhập mã
        isEnteringTime = false;
    } else if (key == '*') {
        // Khi nhấn *, xóa toàn bộ thời gian đã nhập
        enteredTime = 0;
        lcd.clear();
        lcd.print("HH:MM:SS");
    } else if (key >= '0' && key <= '9') {
        // Chỉ xử lý khi nhập số (0-9)
        int digit = key - '0';  // Chuyển ký tự thành số
        if (enteredTime < 999999) {  // Giới hạn tối đa 6 chữ số
            enteredTime = enteredTime * 10 + digit;
            
            // Định dạng hiển thị HH:MM:SS
            unsigned long hours = enteredTime / 10000;
            unsigned long minutes = (enteredTime % 10000) / 100;
            unsigned long seconds = enteredTime % 100;
            
            lcd.clear();
            lcd.print("Time: ");
            
            // Hiển thị giờ với 2 chữ số
            if (hours < 10) lcd.print("0");
            lcd.print(hours);
            lcd.print(":");
            
            // Hiển thị phút với 2 chữ số
            if (minutes < 10) lcd.print("0");
            lcd.print(minutes);
            lcd.print(":");
            
            // Hiển thị giây với 2 chữ số
            if (seconds < 10) lcd.print("0");
            lcd.print(seconds);
        }
    }
}

// Hàm xử lý nhập mã
void handleKeyInput(char key) {
    if (key == '#') {
        // Nhấn # để xác nhận mã
        enteredCode[codeIndex] = '\0'; // Kết thúc chuỗi
        checkCode();
    } else if (key == '*') {
        // Nhấn * để xóa mã
        codeIndex = 0;
        enteredCode[0] = '\0';
        lcd.clear();
        lcd.print("Enter Code:");
    } else {
        // Nhập số (tối đa 7 ký tự)
        if (codeIndex < 7) {
            enteredCode[codeIndex++] = key;
            lcd.setCursor(0, 1);
            lcd.print(enteredCode); // Hiển thị chuỗi mã đã nhập
        }
    }
}

// Hàm kiểm tra mã đã nhập
void checkCode() {
    lcd.clear();
    if (strcmp(enteredCode, correctCode) == 0) {
        if (!isBombArmed) {
            // Kích hoạt bom
            isBombArmed = true;
            timerStart = millis();
            lcd.print("Bomb Armed!");
        } else {
            // Tắt bom
            isBombArmed = false;
            lcd.print("Bomb Defused!");
        }
    } else {
        lcd.print("Wrong Code!");
    }
    delay(2000);
    lcd.clear();
    lcd.print("Enter Code:");
    codeIndex = 0; // Reset mã nhập
}

// Hàm hiển thị đếm ngược
void displayCountdown(unsigned long timeLeft) {
    lcd.clear();
    lcd.setCursor(0, 0);       // In trên dòng đầu tiên
    lcd.print("Time Left: ");  
    lcd.print(timeLeft / 1000);
    lcd.print("s");
}

// Hàm xử lý khi bom nổ
void bombExplode() {
    lcd.clear();
    lcd.print("Terrorist win!");
    for (int i = 0; i < 10; i++) { // Nháy LED để mô phỏng nổ
        sr.set(4, LOW);
        delay(200);
        sr.set(4, HIGH);
        delay(200);
    }
    while (1); // Vô hạn (reset để tiếp tục)
}

void controlLED(unsigned long timeLeft) {
    // Tính toán chu kỳ nhấp nháy (thời gian bật/tắt LED)
    unsigned long blinkInterval = map(timeLeft, 0, countdownTime, 50, 1000); 
    // Tốc độ nhấp nháy giảm dần từ 50ms đến 1000ms

    if (millis() - lastBlinkTime >= blinkInterval) {
        lastBlinkTime = millis();  // Cập nhật thời gian
        ledState = !ledState;      // Đảo trạng thái LED
        sr.set(6, ledState ? LOW : HIGH); // Điều khiển LED qua Q6
    }
}

unsigned long calculateTotalSeconds() {
    unsigned long hours = enteredTime / 10000;
    unsigned long minutes = (enteredTime % 10000) / 100;
    unsigned long seconds = enteredTime % 100;
    
    return hours * 3600 + minutes * 60 + seconds;
}
